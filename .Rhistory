blogdown:::new_post_addin()
blogdown:::new_post_addin()
setwd("C:/Users/zglin/Desktop/Rblog")
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::preview_site()
knitr::opts_chunk$set(eval =TRUE)
library(knitr)
library(dbplyr)
library(sqldf)
library(tidyverse)
# Get the files names
temp = list.files(pattern="*.csv")
# First apply read.csv, then rbind
for (i in 1:length(temp)) {
tab_name <- temp[i] %>%  str_split("\\.csv") %>% unlist() %>% str_split('\\" " ')
assign( temp[i] %>% str_replace('\\.csv',''), read.csv(temp[i]))
}
# Get the files names
temp = list.files(pattern="*.csv")
# First apply read.csv, then rbind
for (i in 1:length(temp)) {
tab_name <- temp[i] %>%  str_split("\\.csv") %>% unlist() %>% str_split('\\" " ')
assign( temp[i] %>% str_replace('\\.csv',''), read.csv(temp[i]))
}
# Get the files names
temp = list.files(pattern="*.csv")
# First apply read.csv, then rbind
for (i in 1:length(temp)) {
tab_name <- temp[i] %>%  str_split("\\.csv") %>% unlist() %>% str_split('\\" " ')
assign( temp[i] %>% str_replace('\\.csv',''), read.csv(temp[i]))
}
# Get the files names
temp = list.files(pattern="*.csv")
# First apply read.csv, then rbind
for (i in 1:length(temp)) {
tab_name <- temp[i] %>%  str_split("\\.csv") %>% unlist() %>% str_split('\\" " ')
assign( temp[i] %>% str_replace('\\.csv',''), read.csv(temp[i]))
}
Summer_Medals <- read.csv("summer.csv", row.names=NULL)
blogdown:::preview_site()
blogdown:::new_post_addin()
knitr::opts_chunk$set(eval =TRUE)
library(knitr)
library(dbplyr)
library(sqldf)
library(tidyverse)
sqldf(
"
select
case when mov_time < 100 then 'love'
when mov_time between 100 and 200 then 'ok'
else 'others' end as my_choose,
count(mov_id)
from movie
group by my_choose
limit 5
"
)
query =  "
select
*
from movie
where mov_lang =
case when mov_time < 100 then mov_lang
when mov_rel_country = 'UK' then mov_lang
else NULL
end
limit 5"
sqldf(query)
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
reticulate::repl_python()
class Solution:
def addBinary(self, a: str, b: str) -> str:
# revert the list
a = [int(i) for i in a][::-1]
b = [int(i) for i in b][::-1]
# get the longest list from the a and b and create an empty list
long =  max(a, b)
short = min(a, b)
result = [0]*len(long)
for i in range(0, len(short)-1, 1):
value = long[i]+ short[i]
if value >= 2:
result[i] = 0
result[i+1] = 1
else:
result[i] = value
for i in range(len(short), len(long)-1):
value = long[i]+result[i]
if value >= 2:
result[i] = 0
result[i+1] = result[i+1]+ 1
else:
result[i] = value
if (result[-1]+long[-1])>=2:
result[-1] = 0
result.append(1)
else:
result = result
result = list(map(str, result))[::-1]
result = ''.join(result)
return result
addBinary('1100','00')
blogdown:::preview_site()
fromsolution import addBinary
from solution import addBinary
quit
reticulate::repl_python()
from Solution import addBinary
addBinary('1100','00')
value = long[i]+result[i]
quit
def addBinary(self, a: str, b: str) -> str:
reticulate::repl_python()
# revert the list
quit
reticulate::repl_python()
def addBinary(self, a: str, b: str):
# revert the list
a = [int(i) for i in a][::-1]
b = [int(i) for i in b][::-1]
# get the longest list from the a and b and create an empty list
long =  max(a, b)
short = min(a, b)
result = [0]*len(long)
for i in range(0, len(short)-1, 1):
value = long[i]+ short[i]
if value >= 2:
result[i] = 0
result[i+1] = 1
else:
result[i] = value
for i in range(len(short), len(long)-1):
value = long[i]+result[i]
if value >= 2:
result[i] = 0
result[i+1] = result[i+1]+ 1
else:
result[i] = value
if (result[-1]+long[-1])>=2:
result[-1] = 0
result.append(1)
else:
result = result
result = list(map(str, result))[::-1]
result = ''.join(result)
return result
quit
reticulate::repl_python()
addBinary('1100','00')
quit
reticulate::repl_python()
def addBinary( a: str, b: str):
# revert the list
a = [int(i) for i in a][::-1]
b = [int(i) for i in b][::-1]
# get the longest list from the a and b and create an empty list
long =  max(a, b)
short = min(a, b)
result = [0]*len(long)
for i in range(0, len(short)-1, 1):
value = long[i]+ short[i]
if value >= 2:
result[i] = 0
result[i+1] = 1
else:
result[i] = value
for i in range(len(short), len(long)-1):
value = long[i]+result[i]
if value >= 2:
result[i] = 0
result[i+1] = result[i+1]+ 1
else:
result[i] = value
if (result[-1]+long[-1])>=2:
result[-1] = 0
result.append(1)
else:
result = result
result = list(map(str, result))[::-1]
result = ''.join(result)
return result
quit
addBinary('1100','00')
reticulate::repl_python()
re = addBinary('1100','00')
print(re)
quit
reticulate::repl_python()
class Solution:
def addBinary(self, a: str, b: str) -> str:
idx1 = len(a) - 1
idx2 = len(b) - 1
carry = 0
result = []
while idx1 >= 0 or idx2 >= 0 or carry:
if idx1 >= 0 and a[idx1] == '1':
carry += 1
if idx2 >= 0 and b[idx2] == '1':
carry += 1
carry, digit = divmod(carry, 2)
result.append(str(digit))
idx1 -= 1
idx2 -= 1
return "".join(reversed(result))
quit
reticulate::repl_python()
def addBinary(self, a: str, b: str):
idx1 = len(a) - 1
idx2 = len(b) - 1
carry = 0
result = []
while idx1 >= 0 or idx2 >= 0 or carry:
if idx1 >= 0 and a[idx1] == '1':
carry += 1
if idx2 >= 0 and b[idx2] == '1':
carry += 1
carry, digit = divmod(carry, 2)
result.append(str(digit))
idx1 -= 1
idx2 -= 1
return "".join(reversed(result))
quit
reticulate::repl_python()
def addBinary( a: str, b: str):
idx1 = len(a) - 1
idx2 = len(b) - 1
carry = 0
result = []
while idx1 >= 0 or idx2 >= 0 or carry:
if idx1 >= 0 and a[idx1] == '1':
carry += 1
if idx2 >= 0 and b[idx2] == '1':
carry += 1
carry, digit = divmod(carry, 2)
result.append(str(digit))
idx1 -= 1
idx2 -= 1
return "".join(reversed(result))
quit
reticulate::repl_python()
def addBinary( a: str, b: str):
idx1 = len(a) - 1
idx2 = len(b) - 1
carry = 0
result = []
while idx1 >= 0 or idx2 >= 0 or carry:
if idx1 >= 0 and a[idx1] == '1':
carry += 1
if idx2 >= 0 and b[idx2] == '1':
carry += 1
carry, digit = divmod(carry, 2)
result.append(str(digit))
idx1 -= 1
idx2 -= 1
return "".join(reversed(result))
blogdown:::preview_site()
unlink('content/post/2021-03-22-interview/index_cache', recursive = TRUE)
people = c(100, 40, 40*0.7,
40*0.7*0.8,40*0.7*0.8^2,40*0.7*0.8^3,40*0.7*0.8^4,40*0.7*0.8^4*0.9)
price = c(10)*8
people = c(100, 40, 40*0.7,
40*0.7*0.8,40*0.7*0.8^2,40*0.7*0.8^3,40*0.7*0.8^4,40*0.7*0.8^4*0.9)
price = c(1:8)
price* people
people = c(100, 40, 40*0.7,
40*0.7*0.8,40*0.7*0.8^2,40*0.7*0.8^3,40*0.7*0.8^4,40*0.7*0.8^4*0.9)
price = c(1:8)
sum(price* people)
people = c(60, 30,20,20,20,20,10)
price = c(1:7
)
sum(price* people)
people = c(60, 60*0.30,60*0.30*0.20,60*0.30*0.20*0.20,
60*0.30*0.20*20*0.20,60*0.30*0.20*20*0.2*0.20,
60*0.30*0.20*20*0.2*0.20*0.10)
price = c(1:7
)
sum(price* people)
people = c(60,
40*0.3,
40*(1-0.3)*0.2,
40*(1-0.3)*(1-0.2)*0.2,
40*(1-0.3)*(1-0.2)*(1-0.2)*0.2,
40*(1-0.3)*(1-0.2)*(1-0.2)*(1-0.2)*0.2,
40*(1-0.3)*(1-0.2)*(1-0.2)*(1-0.2)*(1-0.2)*0.1)
price = c(1:7
)
sum(price* people)
people
blogdown:::preview_site()
blogdown::hugo_server()
blogdown::hugo_build()
blogdown::serve_site()
blogdown::serve_site()
stop_server()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown:::preview_site()
build_site
build_site()
blogdown:::new_post_addin()
blogdown:::pkg_file('resources', 'template-minimal.html')
blogdown:::new_post_addin()
blogdown::html_page
blogdown::html_page()
blogdown:::preview_site()
blogdown:::new_post_addin()
blogdown:::preview_site()
blogdown::stop_server()
blogdown::start_server()
blogdown::hugo_server()
blogdown::start_server()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown::serve_site()
blogdown:::new_post_addin()
blogdown:::preview_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown::preview_site()
blogdown::serve_site()
blogdown::build_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown::build_site()
blogdown::build_site()
blogdown:::preview_site()
blogdown::build_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::hugo_build()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
install.packages("xfun")
install.packages("xfun")
install.packages("xfun")
install.packages("xfun")
install.packages("xfun")
install.packages("xfun")
install.packages("xfun")
install.packages("xfun")
remove.packages("xfun", lib="~/R/win-library/4.0")
install.packages("xfun")
install.packages("xfun")
install.packages("xfun")
blogdown:::preview_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
install.packages("ElemStatLearn")
# install.packages("ElemStatLearn")
library(ElemStatlearn)
# install.packages("ElemStatLearn")
library(ElemStatLearn)
# install.packages("ElemStatLearn")
library('ElemStatLearn')
library(ElemStatLearn)
install.packages("ElemStatLearn")
install.packages("C:/Users/zglin/Downloads/ElemStatLearn_2015.6.26.2.tar.gz", repos = NULL, type = "source")
library(ElemStatLearn)
data(prostate)
prostate = data(prostate)
prostate = data(prostate)
prostate %>% head(4)
library(tidyr)
prostate = data(prostate)
prostate %>% head(4)
prostate
prostate = data(prostate)
prost
prostate = data(prostate)
prostate %>% View(
)
prostate
prostate %>% head(4)
cor = round(cor(prostate),2)
knitr::kable(cor, caption = "Table with kable‚Äù)
library(knitr)
# install the Archive library use the tool
library('ElemStatlearn')
# install the Archive library use the tool
library(ElemStatlearn)
# install the Archive library use the tool
library(tidyr)
library(knitr)
cor = round(cor(prostate),2)
kable(cor, caption = 'Table with kable')
lm(prostate$lpsa~.)
lm(lpsa~lcavol+lweight+age+lbph+svi+lcp+gleason+pgg45, prostate)
summary(model)
model = lm(lpsa~lcavol+lweight+age+lbph+svi+lcp+gleason+pgg45, prostate)
summary(model)
model = lm(lpsa~lcavol+lweight+age+lbph+svi+lcp+gleason+pgg45, prostate)
summary(model)$coefficients
model = lm(lpsa~lcavol+lweight+age+lbph+svi+lcp+gleason+pgg45, prostate)
summary(model)$coefficients
cor = round(cor(prostate),2)
kable(cor, caption = 'Table 3.1')
model = lm(lpsa~lcavol+lweight+age+lbph+svi+lcp+gleason+pgg45, prostate)
summary(model)$coefficients %>% round(2)
model = lm(lpsa~lcavol+lweight+age+lbph+svi+lcp+gleason+pgg45, prostate)
summary(model)$coefficients %>% round(3)
model = lm(lpsa~lcavol+lweight+age+lbph+svi+lcp+gleason+pgg45, prostate)
table = summary(model)$coefficients %>% round(3)
kable(table, caption = 'Table 3.1')
model = lm(lpsa~lcavol+lweight+age+lbph+svi+lcp+gleason+pgg45, prostate)
summary(model)$coefficients %>% round(3) %>% kable()
# kable(table, caption = 'Table 3.1')
summary(model)$coefficients %>% round(3) %>% kable(caption = 'table3.2')
prostate %>% size()
prostate %>% shape()
prostate %>% dim()
set.seed(777)
train_size =  67
test_size = 30
# randomly split data in r
picked = sample(seq_len(nrow(prostate)),size = train_size)
development =prostate[picked,]
holdout =prostate[-picked,]
set.seed(777)
train_size =  67
test_size = 30
# randomly split data in r
picked = sample(seq_len(nrow(prostate)),size = train_size)
train_data =prostate[picked,]
test_data =prostate[-picked,]
model = lm(lpsa~lcavol+lweight+age+lbph+svi+lcp+gleason+pgg45, train)
model = lm(lpsa~lcavol+lweight+age+lbph+svi+lcp+gleason+pgg45, train_data)
summary(model)$coefficients %>% round(3) %>% kable(caption = 'table3.2')
# kable(table, caption = 'Table 3.1')
model = lm(lpsa~lcavol+lweight+age+lbph+svi+lcp+gleason+pgg45, train_data)
summary(model)$coefficients %>% round(3) %>% kable(caption = 'table3.2')
# kable(table, caption = 'Table 3.1')
model2 = lm(lpsa~lcavol+lweight+age, train_data)
anova(model1,model2)
model = lm(lpsa~lcavol+lweight+age+lbph+svi+lcp+gleason+pgg45, train_data)
summary(model)$coefficients %>% round(3) %>% kable(caption = 'table3.2')
# kable(table, caption = 'Table 3.1')
model2 = lm(lpsa~lcavol+lweight+age, train_data)
anova(model,model2)
model2 = lm(lpsa~lcavol+lweight+age, train_data)
anova(model,model2) %>% kable
blogdown::build_site()
blogdown::hugo_build()
blogdown:::preview_site()
unlink('content/en/2021-03-29-sql/index_cache', recursive = TRUE)
install.packages("1071")
install.packages("e1071")
blogdown:::new_post_addin()
blogdown:::preview_site()
Â•Ω‰πÖ‰∏ÄÈòµÊ≤°ÊúâÊõ¥Êñ∞ÊàëÁöÑblog‰∫ÜÔºåÊØèÊ¨°ÁúãÂÆåË∞¢Â§ßÁöÑblogÔºåÈÉΩÊúâË¢´ÊâìÈ∏°Ë°ÄÁöÑÊÑüËßâÔºåÊõ¥Êñ∞ÂçöÂÆ¢Êõ¥Êñ∞ÂçöÂÆ¢„ÄÇÁÑ∂ÂêéÊØèÊ¨°ÈÉΩÊòØÁÆó‰∫ÜÔºåÂèçÊ≠£Ê≤°‰∫∫ÁúãÔºå
ËøôÊ¨°ÁöÑÂÜôËøô‰∏™ÂçöÂÆ¢‰∏ªË¶ÅÊòØÂ•Ω‰πÖÂõ†‰∏∫ÁïèÈöæÔºå‰∏çÊÉ≥ÁªÉ‰π†ÂÜôcodeÔºå ÁÑ∂ÂêéÂä†‰∏äÂú®Êó†Á∫øË¥üËÉΩÈáèÔºåÂä†‰πãËá™Èó≠ÁöÑÊÉÖÁª™‰∏ãÔºåÂ∞±ÁÆóÊòØÁªôËá™Â∑±ÁöÑ‰∏ÄÈÄöÊâìËµ∑Â•ΩÂòûÔºàÊàëËá™Â∑±ÁúãÔºâ„ÄÇ
ÂóØÔºåÊòØËøô‰∏™Ê†∑Â≠êÁöÑÔºåR Âíå python Âè´Âï•ÔºåËÆ°ÁÆóÊú∫ËØ≠Ë®ÄÔºå Âï•ÊòØËØ≠Ë®ÄÔºåÂ∞±ÊòØÊñπ‰æø‰∫§ÊµÅÁî®ÁöÑÂ∑•ÂÖ∑„ÄÇËøô‰∏™Áé∞Âú®Â∏∏Áî®ÁöÑ‰∏§‰∏™ËØ≠Ë®ÄÔºå Âª∫Á´ãÂú®Ëã±ËØ≠ÁöÑËØ≠Ê≥ï‰∏äÂºÄÂèëÂá∫Êù•ÁöÑÔºåËøô‰πüÊòØ‰∏∫Âï•Ôºå Áé∞Âú®Êàë‰ª¨Âú®Âà∑Â∞èÁ∫¢‰π¶ÁöÑÊó∂ÂÄôÔºåÁúãÂà∞ÂæàÂ§öÊ†áÈ¢òÔºö ËØ¥ËΩ¨ËÆ°ÁÆóÊú∫‰∏çË¶ÅÊï∞Â≠¶Â•ΩÔºåÊñáÁßëÁîüËΩ¨Á†ÅÂÜú„ÄÇÊàëËßâÂæóÊòØÂçÅÂàÜÁöÑÂêàÁêÜÁöÑ„ÄÇ ÊØïÁ´üÊòØËØ≠Ë®ÄÂêóÔºåÂè™Ë¶ÅÂõ†‰∏∫Â∞èÂ≠¶ÊØï‰∏öÈÉΩÂèØ‰ª•ÂéªÂÅöÁ†ÅÂÜú„ÄÇÈÇ£Êàë‰ª¨‰ªéÂ∞èÊòØÊÄé‰πàÂ≠¶‰π†ËØ≠Ë®ÄÁöÑÂë¢Ôºü Âê¨ËØ¥ËØªÂÜôÔºå Âê¨ÊòØÈªòÂÜôÔºåËØ¥ÊòØËØª‰π¶ÔºåËØªÊòØÈòÖËØªÔºåÂÜôÊòØÂÜô‰Ωú„ÄÇÈÇ£ÁªÉ‰π†ÁºñÁ®ãÂ∞±ÊòØ
Âê¨ÔºåÂ§öÂê¨ÁÇπÈü≥‰πêÔºåËØ¥ÔºåÂ∞±ÊòØÂÅ∂Â∞îÂî±Âî±Ê≠åÂ∞§ÂÖ∂ÂÆûÂú®ÊÉ≥‰∏çÂá∫Êù•ÂèØ‰ª•Ëá™Ë®ÄËá™ËØ≠ÔºåÊàñËÄÖÈ™Ç‰∫∫ÔºåÈòÖËØªËøô‰∏™ÊØîËæÉÈáçË¶Å‰∫ÜÔºåÂ∞±ÊòØÂ§öÁúã‰∫∫ÂÆ∂ÂÜôÁöÑcodeÔºå ÊúÄÂêéÂ∞±ÊòØÊúÄÈáçË¶ÅÁöÑÊòØÂ§öÂÜô„ÄÇ ‰ªª‰ΩïËØ≠Ë®ÄÔºåÂè™Ë¶Å‰∏çÁî®ÔºåÂ∞±‰∏ç‰ºöÊìÖÈïøÔºåÊØïÁ´üËøô‰∏™ÊòØ‰∏Ä‰∏™ÊäÄÊúØÔºåÂæàÂ§öÊó∂ÂÄô ‰∏çÊòØËÄÉÈ™åÊô∫ÂïÜÔºåÂõ†‰∏∫Áé∞Âú®ÁΩëÁªúÁöÑÂèëËææÔºåÊÄé‰πàÂÄüÂä©ÊØî‰Ω†ÂéâÂÆ≥ÁöÑ‰∫∫ÁöÑÂäõÈáèÁöÑËÉΩÂäõ‰πüÊòØÂ∞§ÂÖ∂ÈáçË¶ÅÁöÑ„ÄÇ ‰ΩÜÊòØËØùÂèàËØ¥ÂõûÊù•‰∫ÜÔºåËá™Â∑±ÊáÇËã±ËØ≠ÂíåËÄÅÂ§ñ‰∫§ÊµÅ ÊØîÁî®‰∏™ÁîµÂ≠êÁøªËØëÊú∫Ë∑üËàíÊúç‰∏çÊòØÂêóÔºåÊâÄ‰ª•ÊàëÁöÑÊÑèÊÄùÂ∞±ÊòØÔºå‰Ω†Âà´ÊÄïÔºåÂèçÊ≠£ÈÉΩËÉΩÂÜôÔºåÂí±‰ª¨Â∞ΩÈáèËá™Â∑±ÂÜôÔºåÂÆûÂú®‰∏çË°åÊäÑÊäÑÁêÜËß£‰∏Ä‰∏ãÔºåÂ∞äÈáçÁâàÊùÉÔºåÂ∞±Êó†‰º§Â§ßÈõÖ„ÄÇ ÊÄªËÄåË®Ä‰πãÔºå‰Ω†ÊÄïÂï•Ôºå‰∏ç‰ºöÂÜôÔºå‰Ω†‰ºöÊäÑÂêó„ÄÇËÆ∞Âæó‰ª•ÂâçÊàë‰ª¨‰∏äÂ≠¶ÁöÑÊó∂ÂÄôÔºåÊúâ‰∫õÁ∫ßÂà´ÔºåÂ≠¶Èú∏ÂºÄÊ∫êÔºåÂ≠¶Ê∏£Ë∑üÁùÄÊäÑÊäÑÔºåÂ≠¶Á≤æÊòØËæπÊäÑËæπÊÉ≥‰∏∫Âï•Ëøô‰∏™‰Ωú‰∏öÊòØËøôÊ†∑ÂÜôÁöÑ„ÄÇ
ÊúÄÂêé‰∏Ä‰ª∂‰∫ãÔºåÊàëÂú®ÊÄùËÄÉË∞¢Â§ßÁöÑËØùÔºåÁªüËÆ°ÊòØÂÖàÊÉ≥‰∏∫Âï•Âú®ÊÉ≥ÊÄé‰πàÂÅöÔºåÁºñÁ®ãÊòØÂÖàÂéªÂÆûÁé∞Âú®ÊÉ≥‰∏∫Âï•ÔºåÊâÄ‰ª•ÊàëÂØπ‰∫éÊÉ≥Â≠¶ÁºñÁ®ã‰ΩÜÊòØÂç¥Âõ†‰∏∫Áïè‚ÄúÈöæ‚ÄùÂΩ±ÂìçÁöÑÊúãÂèãËØ¥ÔºàÂÖ∂ÂÆûÂ∞±ÊòØÊàëËá™Â∑±Ôºâ ÂÖàÂ§çÂà∂Á≤òË¥¥ÔºåË∑ëËµ∑Êù•Âêß„ÄÇ„ÄÇ„ÄÇ„ÄÇ„ÄÇ„ÄÇ„ÄÇ„ÄÇ„ÄÇË∑ëÂÆå‰∫ÜÔºåÂú®ÊÉ≥Âí¶Êàë‰∏∫Âï•Ë∑ëÔºåÊÄé‰πàË∑ëÊõ¥Âø´„ÄÇÂ•ΩÂòûÔºå ‰ªäÂ§©Â∞±Âà∞Ëøô‰∫ÜÊÄùÂØÜËææÔºÅÔºÅÔºÅ
blogdown::build_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown::build_site()
blogdown:::preview_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::preview_site()
blogdown::build_site()
library(tinytex)
tlmgr_search('framed.sty')  # ÊêúÁ¥¢ÂåÖÂê´ framed.sty Êñá‰ª∂ÁöÑ LaTeX ÂåÖ
tlmgr_install('framed')     # ÂÆâË£Ö framed ÂåÖ
library(tinytex)
tlmgr_search('framed.sty')  # ÊêúÁ¥¢ÂåÖÂê´ framed.sty Êñá‰ª∂ÁöÑ LaTeX ÂåÖ
tlmgr_install('framed')     # ÂÆâË£Ö framed ÂåÖ
library(tinytex)
tlmgr_search('framed.sty')  # ÊêúÁ¥¢ÂåÖÂê´ framed.sty Êñá‰ª∂ÁöÑ LaTeX ÂåÖ
tlmgr_install('framed')     # ÂÆâË£Ö framed ÂåÖ
tlmgr_update()
library(tinytex)
tlmgr_search('framed.sty')  # ÊêúÁ¥¢ÂåÖÂê´ framed.sty Êñá‰ª∂ÁöÑ LaTeX ÂåÖ
tlmgr_install('framed')     # ÂÆâË£Ö framed ÂåÖ
tlmgr_search('framed.sty')
tlmgr install framed
q()
